/*
 * Title: Mr
 * Author: Joseph Sigar
 * Date: 12/04/2018
 * File name: Question 2
 * 
 * Purpose: To be able to store a reply message written by a Responder intended
 * for an advertiser. 
 * 
 * Assumptions:
 * 1. The reply text can be as long as the responder likes. I.e. no limit is set
 *    on the reply text.
 * 2. The reply text does not have to contain strings for this prototype
 * 
 * Condition of Input:
 * responder        -   Responder Object, Requires Customer Object
 * reply text       -   String of any length.
 * 
 * Expected Output
 * responder        - Responder Object
 * reply text       - String
 */
package DatingApplication;

/**
 * A Class that stores the responder object as well the reply the responder
 * may have generated
 * 
 * @version 1.02 12 Apr 2018
 * @author Joseph Sigar
 */
public class ReplyMessage {
    
    /** 
     * A parameter to store the responder Object
     */
    private Responder responder;
    
    /**
     * A parameter to store the reply text generated by the responder
     */
    private String replyText;
    
    /**
     * The default constructor that is called upon when a new ReplyMessage
     * object is created. The constructor initializes the parameters to the
     * program default values.
     */
    public ReplyMessage() {
        // Using the constructor to inialize the ReplyMessage parameters.
        responder = new Responder();
        replyText = "";
    }
    
    /**
     * A Constructor that initializes the class variables to those set by the 
     * user. And is called upon when referenced by the user.
     * 
     * @param responder Object that holds the responder details
     * @param replyText The reply text generated by the responder
     * @throws java.lang.CloneNotSupportedException
     */
    public ReplyMessage(Responder responder, String replyText) throws CloneNotSupportedException {
        // A constructor that initializes the parameters. No exceptions thrown
        this.responder = responder.clone();
        this.replyText = replyText;
    }
    
    /**
     * A method used to returns the Responder details, when called upon
     * 
     * @return a Responder Object with the responder details
     */
    public Responder getResponder() {
        // A getter method for the responder details
        return responder;
    }
    
    /**
     * A method used to set the Responder Object to a user-defined value
     * 
     * @param responder a user-defined Responder Object 
     */
    public void setResponder(Responder responder){
        // A setter method for the Responder object 
        this.responder = responder;
    }
    
    /**
     * A method used to return the Reply text generated by the Responder
     * @return a string containing the reply of the responder
     */
    public String getReply() {
        // a getter method of the reply text parameter
        return replyText;
    }
    
    /**
     * A method used to set the reply text to a user-defined value
     * @param replyText a string that is defined by the user
     */
    public void setReply(String replyText) {
        this.replyText = replyText;
    }
    
    /**
     * A method used to return the parameters of the object back to the 
     * program default values.
     */
    public void clear() {
        // A clear method to set the paramaters to default
        responder.clear();
        replyText = "";
    }
    
    /**
     * A method used to copy one ReplyMessage object to another.
     * @return a copied ReplyMessage Object
     * @throws java.lang.CloneNotSupportedException 
     */
    @Override
    public ReplyMessage clone() throws CloneNotSupportedException {
        // a method used for deep copying of the Reply Message
        ReplyMessage reply = new ReplyMessage();
        reply.responder = this.responder.clone();
        reply.replyText = this.replyText;
        
        return reply;
    }
}
